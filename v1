#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 15 18:11:54 2021

@author: user
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress
from matplotlib import animation
from matplotlib import cm
from matplotlib.colors import ListedColormap

class SAW():
    def __init__(self,N=50):
        # cardinal: 0 = down, 1 = left, 2 = up, 3 = right
        self.N = N
        self.size = int(N*1.5)
        self.grid = np.zeros((self.size,self.size))
        self.half = self.size//2
        self.center = np.array([self.half,self.half])
        self.grid[self.half,self.half] = 1
        self.grid[self.half-1,self.half] = 1
        self.direction = 2
        self.position = [self.half-1,self.half]
        self.weight = 1
        self.k = 0
        self.walking = True
        
    def reset(self):
        self.grid = np.zeros((self.size,self.size))
        self.grid[self.half,self.half] = 1
        self.grid[self.half-1,self.half] = 1
        self.direction = 2
        self.position = [self.half-1,self.half]
        self.weight = 1
        self.k = 0
        self.walking = True
        
    def step(self):
        step_direction = (np.random.randint(1,4) + self.direction - 2)%4
        proposed_position = [self.position[0]+(1-step_direction)*(step_direction%2==0),\
                             self.position[1]+(step_direction-2)*(step_direction%2!=0)]
        #0: [i+1][j]; 1: [i][j-1]; 2: [i-1][j]; 3: [i][j+1]
        if self.grid[proposed_position[0],proposed_position[1]] == 1:
            self.walking = False
            return 0
        else:
            self.grid[proposed_position[0],proposed_position[1]] = 1
            self.position = proposed_position
            self.direction = step_direction
        self.k += 1
        return 1
    
    def weighted_step(self):
        i,j = self.position
        open_sites = [coord for coord in [[i+1,j],[i-1,j],[i,j+1],[i,j-1]] if self.grid[coord[0],coord[1]] == 0]
        Sn = len(open_sites)
        
        if Sn == 0: # if there are no steps available, return 0
            self.weight = 0
            return 0
        
        self.weight *= Sn/3
        
        new_position = open_sites[np.random.randint(0,Sn)]
        diff = np.array(self.position) - np.array(new_position)
        if diff[0] == 1:
            self.direction = 0
        elif diff[0] == -1:
            self.direction = 2
        elif diff[1] == 1:
            self.direction = 3
        elif diff[1] == -1:
            self.direction = 1
        self.position = new_position
        self.grid[self.position[0],self.position[1]] = self.k + 1
        self.k += 1
        return 1
            
    def walk(self,step_method):
        is_walking = 1
        k = 0
        while is_walking == 1 and k < self.N:
            is_walking = step_method()
            k += 1
        if k == self.N:
            return 1
        else:
            return 0

def walkers(N=10):
    successes = 0
    number_of_walkers = 1000
    success_array = np.zeros((number_of_walkers,2))
    fail_array = np.zeros((number_of_walkers,2))
    both_array = np.zeros((number_of_walkers,2))

    for i in range(number_of_walkers):
        walker = SAW(N)
        if walker.walk(walker.weighted_step):
            successes += 1
            success_array[i] = [walker.weight,np.sum(np.square(np.array(walker.position)-walker.center))]
        else:
            fail_array[i] = [walker.weight,np.sum(np.square(np.array(walker.position)-walker.center))]
        both_array[i] = [walker.weight,np.sum(np.square(np.array(walker.position)-walker.center))]
    success_rate = successes/number_of_walkers*100
    print("success rate:",success_rate,"\nnumber of steps:",N)
    
    if np.abs(np.sum(both_array[:,0])/number_of_walkers - 1) > 1e-8: 
        success_norm = success_array[:,0]@success_array[:,1]/np.sum(success_array[:,0])
        both_norm = both_array[:,0]@both_array[:,1]/np.sum(both_array[:,0])
        fail_norm = 0
    else:
        success_norm = np.sum(success_array[:,1])/number_of_walkers
        fail_norm = np.sum(fail_array[:,1])/number_of_walkers
        both_norm = np.sum(both_array[:,1])/number_of_walkers
        
    return success_rate, success_norm, fail_norm, both_norm

    
    
def iterate_and_plot():
    step_numbers = np.arange(4,256)
    success_rates = []
    success_norms = []
    fail_norms = []
    both_norms = []
    for n in step_numbers:
        success_rate,success_norm,fail_norm,both_norm = walkers(n)
        success_rates.append(success_rate)
        success_norms.append(success_norm)
        fail_norms.append(fail_norm)
        both_norms.append(both_norm)
        
    plt.plot(step_numbers,success_rates)
    plt.xlabel("number of steps (N)")
    plt.ylabel("success rate %")
    plt.show()
    l1,l2,l3 = plt.plot(step_numbers,success_norms,'-g',step_numbers,fail_norms,'-y',step_numbers,both_norms,'-.r')
    plt.legend((l1,l2,l3),('success','fail','both'))
    plt.xlabel("number of steps (N)")
    plt.ylabel("mean square distance")
    plt.show()
    
    fit = linregress(np.log10(step_numbers),np.log10(both_norms))
    x_fit = np.log10(step_numbers)
    y_fit = fit.slope*x_fit+fit.intercept
    plt.plot(np.log10(step_numbers),np.log10(both_norms),'ok',x_fit,y_fit,'-r')
    plt.title(fit.slope)
    plt.show()
    
    
def animate_weighted(i,walker,im):
    walker.weighted_step()
    if walker.weight == 0 or walker.k >= walker.N:
        walker.reset()
    im.set_array(walker.grid)
    return im,

def animate_unweighted(i,walker,im):
    walker.step()
    if walker.walking or walker.k >= walker.N:
        walker.reset()
    im.set_array(walker.grid)
    return im,
    
def make_a_movie():
    fig = plt.figure(figsize=(10,10))
    plt.tick_params(which='both',length=0,width=0,labelbottom=False,labelleft=False)
    plt.tight_layout()
    number_of_walkers = 50
    N = 100
    
    walker = SAW(N)
    im = plt.imshow(walker.grid,vmin=-0.3,vmax=1.5,cmap='hot')
    
    i = 0
    while i < number_of_walkers:
        anim = animation.FuncAnimation(fig, animate_weighted, fargs=(walker,im),save_count = 1000)
        print(i)
        i += 1
    
    f = r'weighted_step.mp4'
    Writer = animation.writers['ffmpeg']
    writer = Writer(fps=30,bitrate=1800)
    anim.save(f, writer=writer)
    
    i = 0
    while i < number_of_walkers:
        anim = animation.FuncAnimation(fig, animate_unweighted, fargs=(walker,im),save_count = 1000)
        print(i)
        i += 1
    
    f = r'unweighted_step.mp4'
    Writer = animation.writers['ffmpeg']
    writer = Writer(fps=30,bitrate=1800)
    anim.save(f, writer=writer)
    
    
def layered_plot(N=100):
    fig = plt.figure(figsize=(10,10))
    plt.tick_params(which='both',length=0,width=0,labelbottom=False,labelleft=False)
    plt.tight_layout()
    number_of_walkers = 50
    output_array = []
    cmap = cm.jet
    my_cmap = cmap(np.arange(cmap.N))
    my_cmap[:,-1] = np.linspace(0,1,cmap.N)
    my_cmap = ListedColormap(my_cmap)
    my_cmap.set_under('k',alpha=0)
    alpha_vals = np.linspace(0.2,1,number_of_walkers,endpoint=True)  
    colors = ['viridis', 'plasma', 'inferno', 'magma', 'cividis', 'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds',
            'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
            'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn', 'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
            'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
            'hot', 'afmhot', 'gist_heat', 'copper', 'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',
            'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic', 'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',
            'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',
            'gist_rainbow', 'rainbow', 'jet', 'turbo', 'nipy_spectral',
            'gist_ncar']
    im = [None] * number_of_walkers
    for i in range(number_of_walkers):
        walker = SAW(N)
        walker.walk(walker.weighted_step)
        output_array.append(walker.grid)
    for i in range(number_of_walkers):
        im[i] = plt.imshow(output_array[i],cmap=my_cmap)
    plt.show()
        
    
def main():
    #iterate_and_plot()
    #make_a_movie()
    layered_plot()
    
if __name__ == "__main__":main()
        
    
            
        
